from flask import Flask, request, jsonify, render_template
from web3 import Web3
from get_contract_addr import get_contract_addr

app = Flask(__name__)

# =================== Blockchain Connection ===================
NODE_URL = "http://192.168.0.111:22000"
CHAIN_ID = 10

web3 = Web3(Web3.HTTPProvider(NODE_URL))
if not web3.is_connected():
    raise ConnectionError("Failed to connect to Ethereum node.")

# =================== Contract Deployment ===================
BYTECODE = "60806040525f60205560016021555f60225f6101000a81548160ff0219169083600281111561003157610030610151565b5b02179055505f602f55348015610045575f5ffd5b505f5f90505b600a81101561014b5760405180608001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f600281111561008e5761008d610151565b5b81526020015f81526020015f8152505f82600a81106100b0576100af61017e565b5b600302015f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151815f0160146101000a81548160ff0219169083600281111561012257610121610151565b5b02179055506040820151816001015560608201518160020155905050808060010191505061004b565b506101ab565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b611d66806101b85f395ff3fe608060405234801561000f575f5ffd5b5060043610610109575f3560e01c806374244bc9116100a0578063a54c3fc01161006f578063a54c3fc0146102d1578063ac7edbbb146102f0578063be25a7181461030e578063cc9874f514610318578063d4d52df41461033457610109565b806374244bc91461025b5780638a19c8bc146102795780638dafc0c914610297578063a0f8d305146102b557610109565b80635220a569116100dc5780635220a569146101ac578063599c0982146101dc5780635c8551a11461020c57806367fa27a91461022a57610109565b8063055ad42e1461010d5780632820aece1461012b5780633a3947191461015e5780633c90eb741461018e575b5f5ffd5b610115610352565b604051610122919061140f565b60405180910390f35b6101456004803603810190610140919061145f565b610364565b604051610155949392919061151e565b60405180910390f35b6101786004803603810190610173919061158b565b6103c1565b60405161018591906115d0565b60405180910390f35b6101966103de565b6040516101a391906115e9565b60405180910390f35b6101c660048036038101906101c1919061158b565b6103e4565b6040516101d391906115d0565b60405180910390f35b6101f660048036038101906101f1919061158b565b610401565b60405161020391906115e9565b60405180910390f35b610214610416565b60405161022191906115e9565b60405180910390f35b610244600480360381019061023f919061145f565b61041c565b60405161025292919061161a565b60405180910390f35b610263610462565b60405161027091906115e9565b60405180910390f35b610281610467565b60405161028e91906115e9565b60405180910390f35b61029f61046d565b6040516102ac9190611641565b60405180910390f35b6102cf60048036038101906102ca919061167d565b610473565b005b6102d9610817565b6040516102e79291906116cd565b60405180910390f35b6102f8610b2e565b6040516103059190611641565b60405180910390f35b610316610cd4565b005b610332600480360381019061032d919061171e565b61104f565b005b61033c6112de565b6040516103499190611641565b60405180910390f35b60225f9054906101000a900460ff1681565b5f81600a8110610372575f80fd5b600302015f91509050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690805f0160149054906101000a900460ff16908060010154908060020154905084565b6030602052805f5260405f205f915054906101000a900460ff1681565b60205481565b601f602052805f5260405f205f915054906101000a900460ff1681565b601e602052805f5260405f205f915090505481565b602f5481565b6025816005811061042b575f80fd5b600202015f91509050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b600a81565b60215481565b60245481565b5f8060028111156104875761048661139c565b5b60225f9054906101000a900460ff1660028111156104a8576104a761139c565b5b146104e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104df906117a3565b60405180910390fd5b5f601f5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16156105d957601e5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490505f5f82600a811061058c5761058b6117c1565b5b6003020160010154146105d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cb9061185e565b60405180910390fd5b6106d2565b600a6020541061061e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610615906118c6565b60405180910390fd5b602054905080601e5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055506001601f5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555060205f8154809291906106cc90611911565b91905055505b60405180608001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200186600281111561070c5761070b61139c565b5b8152602001858152602001848152505f82600a811061072e5761072d6117c1565b5b600302015f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151815f0160146101000a81548160ff021916908360028111156107a05761079f61139c565b5b021790555060408201518160010155606082015181600201559050503373ffffffffffffffffffffffffffffffffffffffff167fe816be7f08a4ae49052432c5aef1a5feaf7359792264ff385ec2efd32bf97684828787876040516108089493929190611958565b60405180910390a25050505050565b5f5f600180600281111561082e5761082d61139c565b5b60225f9054906101000a900460ff16600281111561084f5761084e61139c565b5b1461088f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610886906117a3565b60405180910390fd5b5f602f54036108a5575f5f1b5f92509250610b29565b6001602f54036108e4575f60255f600581106108c4576108c36117c1565b5b600202016001015490506108d7816112e4565b8060019350935050610b29565b6108ec611358565b6108f461137a565b5f5f90505f5f90505b602f548160ff161015610a1f575f60258260ff1660058110610922576109216117c1565b5b600202016001015490505f5f90505f5f90505b8460ff168160ff1610156109ac5782878260ff166005811061095a576109596117c1565b5b60200201510361099f57858160ff166005811061097a576109796117c1565b5b60200201805180919061098c906119a7565b60ff1660ff1681525050600191506109ac565b8080600101915050610935565b5080610a0a5781868560ff16600581106109c9576109c86117c1565b5b6020020181815250506001858560ff16600581106109ea576109e96117c1565b5b602002019060ff16908160ff16815250508380610a06906119a7565b9450505b50508080610a17906119a7565b9150506108fd565b505f5f90505f5f90505f5f90505f5f90505b8460ff168160ff161015610ac9578360ff16868260ff1660058110610a5957610a586117c1565b5b602002015160ff161115610a8f57858160ff1660058110610a7d57610a7c6117c1565b5b602002015193508092505f9150610abc565b8360ff16868260ff1660058110610aa957610aa86117c1565b5b602002015160ff1603610abb57600191505b5b8080600101915050610a31565b5060018360ff16118015610adb575080155b15610b1a575f868360ff1660058110610af757610af66117c1565b5b60200201519050610b07816112e4565b8060019950995050505050505050610b29565b5f5f1b5f985098505050505050505b509091565b5f60605f5f90505b600a811015610c4d575f5f82600a8110610b5357610b526117c1565b5b600302016040518060800160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020015f820160149054906101000a900460ff166002811115610bda57610bd961139c565b5b6002811115610bec57610beb61139c565b5b815260200160018201548152602001600282015481525050905082815f0151826020015183604001518460600151604051602001610c2e959493929190611aba565b6040516020818303038152906040529250508080600101915050610b36565b505f818051906020012090505f5f1b60235403610c98578081604051602001610c77929190611b34565b60405160208183030381529060405280519060200120602381905550610cca565b60235481604051602001610cad929190611b34565b604051602081830303815290604052805190602001206023819055505b6023549250505090565b5f6002811115610ce757610ce661139c565b5b60225f9054906101000a900460ff166002811115610d0857610d0761139c565b5b03610d3c57600160225f6101000a81548160ff02191690836002811115610d3257610d3161139c565b5b0217905550611004565b60016002811115610d5057610d4f61139c565b5b60225f9054906101000a900460ff166002811115610d7157610d7061139c565b5b03610da557600260225f6101000a81548160ff02191690836002811115610d9b57610d9a61139c565b5b0217905550611003565b600280811115610db857610db761139c565b5b60225f9054906101000a900460ff166002811115610dd957610dd861139c565b5b03611002575f60225f6101000a81548160ff02191690836002811115610e0257610e0161139c565b5b021790555060215f815480929190610e1990611911565b91905055505f5f90505b602054811015610eb9575f5f82600a8110610e4157610e406117c1565b5b600302015f0160146101000a81548160ff02191690836002811115610e6957610e6861139c565b5b02179055505f5f82600a8110610e8257610e816117c1565b5b60030201600101819055505f5f82600a8110610ea157610ea06117c1565b5b60030201600201819055508080600101915050610e23565b505f5f90505b602f54811015610f50575f60258260058110610ede57610edd6117c1565b5b600202015f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f5f1b60258260058110610f3857610f376117c1565b5b60020201600101819055508080600101915050610ebf565b505f602f819055505f5f90505b6005811015611000575f60305f60258460058110610f7e57610f7d6117c1565b5b600202015f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508080600101915050610f5d565b505b5b5b7f70eca82567b065893a5e6cc590178b6b320855676b6a9a066625933e0c8ebe5860215460225f9054906101000a900460ff16604051611045929190611b5f565b60405180910390a1565b60018060028111156110645761106361139c565b5b60225f9054906101000a900460ff1660028111156110855761108461139c565b5b146110c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110bc906117a3565b60405180910390fd5b6005602f541061110a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110190611bf6565b60405180910390fd5b60305f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615611194576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118b90611c84565b60405180910390fd5b5f5f1b82036111d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111cf90611d12565b60405180910390fd5b60405180604001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001838152506025602f5460058110611219576112186117c1565b5b600202015f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155905050600160305f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550602f5f8154809291906112d590611911565b91905055505050565b60235481565b5f5f1b60245403611323578081604051602001611302929190611b34565b60405160208183030381529060405280519060200120602481905550611355565b60245481604051602001611338929190611b34565b604051602081830303815290604052805190602001206024819055505b50565b6040518060a00160405280600590602082028036833780820191505090505090565b6040518060a00160405280600590602082028036833780820191505090505090565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b600381106113da576113d961139c565b5b50565b5f8190506113ea826113c9565b919050565b5f6113f9826113dd565b9050919050565b611409816113ef565b82525050565b5f6020820190506114225f830184611400565b92915050565b5f5ffd5b5f819050919050565b61143e8161142c565b8114611448575f5ffd5b50565b5f8135905061145981611435565b92915050565b5f6020828403121561147457611473611428565b5b5f6114818482850161144b565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6114b38261148a565b9050919050565b6114c3816114a9565b82525050565b600381106114da576114d961139c565b5b50565b5f8190506114ea826114c9565b919050565b5f6114f9826114dd565b9050919050565b611509816114ef565b82525050565b6115188161142c565b82525050565b5f6080820190506115315f8301876114ba565b61153e6020830186611500565b61154b604083018561150f565b611558606083018461150f565b95945050505050565b61156a816114a9565b8114611574575f5ffd5b50565b5f8135905061158581611561565b92915050565b5f602082840312156115a05761159f611428565b5b5f6115ad84828501611577565b91505092915050565b5f8115159050919050565b6115ca816115b6565b82525050565b5f6020820190506115e35f8301846115c1565b92915050565b5f6020820190506115fc5f83018461150f565b92915050565b5f819050919050565b61161481611602565b82525050565b5f60408201905061162d5f8301856114ba565b61163a602083018461160b565b9392505050565b5f6020820190506116545f83018461160b565b92915050565b60038110611666575f5ffd5b50565b5f813590506116778161165a565b92915050565b5f5f5f6060848603121561169457611693611428565b5b5f6116a186828701611669565b93505060206116b28682870161144b565b92505060406116c38682870161144b565b9150509250925092565b5f6040820190506116e05f83018561160b565b6116ed60208301846115c1565b9392505050565b6116fd81611602565b8114611707575f5ffd5b50565b5f81359050611718816116f4565b92915050565b5f6020828403121561173357611732611428565b5b5f6117408482850161170a565b91505092915050565b5f82825260208201905092915050565b7f4e6f7420616c6c6f77656420696e2074686973207068617365000000000000005f82015250565b5f61178d601983611749565b915061179882611759565b602082019050919050565b5f6020820190508181035f8301526117ba81611781565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4461746120616c7265616479207375626d697474656420696e207468652063755f8201527f7272656e7420726f756e64000000000000000000000000000000000000000000602082015250565b5f611848602b83611749565b9150611853826117ee565b604082019050919050565b5f6020820190508181035f8301526118758161183c565b9050919050565b7f4e6f20617661696c61626c6520736c6f747300000000000000000000000000005f82015250565b5f6118b0601283611749565b91506118bb8261187c565b602082019050919050565b5f6020820190508181035f8301526118dd816118a4565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61191b8261142c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361194d5761194c6118e4565b5b600182019050919050565b5f60808201905061196b5f83018761150f565b6119786020830186611500565b611985604083018561150f565b611992606083018461150f565b95945050505050565b5f60ff82169050919050565b5f6119b18261199b565b915060ff82036119c4576119c36118e4565b5b600182019050919050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f6119fb826119cf565b611a0581856119d9565b9350611a158185602086016119e3565b80840191505092915050565b5f8160601b9050919050565b5f611a3782611a21565b9050919050565b5f611a4882611a2d565b9050919050565b611a60611a5b826114a9565b611a3e565b82525050565b5f8160f81b9050919050565b5f611a7c82611a66565b9050919050565b611a94611a8f826114ef565b611a72565b82525050565b5f819050919050565b611ab4611aaf8261142c565b611a9a565b82525050565b5f611ac582886119f1565b9150611ad18287611a4f565b601482019150611ae18286611a83565b600182019150611af18285611aa3565b602082019150611b018284611aa3565b6020820191508190509695505050505050565b5f819050919050565b611b2e611b2982611602565b611b14565b82525050565b5f611b3f8285611b1d565b602082019150611b4f8284611b1d565b6020820191508190509392505050565b5f604082019050611b725f83018561150f565b611b7f6020830184611400565b9392505050565b7f4d6178696d756d203520726573756c747320616c7265616479207375626d69745f8201527f7465642e00000000000000000000000000000000000000000000000000000000602082015250565b5f611be0602483611749565b9150611beb82611b86565b604082019050919050565b5f6020820190508181035f830152611c0d81611bd4565b9050919050565b7f596f75206861766520616c7265616479207375626d69747465642061207265735f8201527f756c742e00000000000000000000000000000000000000000000000000000000602082015250565b5f611c6e602483611749565b9150611c7982611c14565b604082019050919050565b5f6020820190508181035f830152611c9b81611c62565b9050919050565b7f496e76616c696420726573756c74206861736820692e652e2c20697473206e755f8201527f6c6c2e0000000000000000000000000000000000000000000000000000000000602082015250565b5f611cfc602383611749565b9150611d0782611ca2565b604082019050919050565b5f6020820190508181035f830152611d2981611cf0565b905091905056fea26469706673582212207814f4ad708955c014c6d05d45e0e3619f3032dfbfa35da32558cd3c6a67c01564736f6c634300081e0033"  # Insert bytecode here and don't remove the commas
ABI = [[
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "participant",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "slot",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "enum P2PEnergyTrading.Role",
				"name": "role",
				"type": "uint8"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "energy",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "price",
				"type": "uint256"
			}
		],
		"name": "DataSubmitted",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "round",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "enum P2PEnergyTrading.Phase",
				"name": "newPhase",
				"type": "uint8"
			}
		],
		"name": "PhaseChanged",
		"type": "event"
	},
	{
		"inputs": [],
		"name": "TOTAL_PARTICIPANTS",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"name": "addressToSlot",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "advancePhase",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "currentPhase",
		"outputs": [
			{
				"internalType": "enum P2PEnergyTrading.Phase",
				"name": "",
				"type": "uint8"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "currentRound",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"name": "hasSlot",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"name": "hasSubmittedResult",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "hashParticipantsList",
		"outputs": [
			{
				"internalType": "bytes32",
				"name": "",
				"type": "bytes32"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "nextAvailableSlot",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "participantsList",
		"outputs": [
			{
				"internalType": "address",
				"name": "id",
				"type": "address"
			},
			{
				"internalType": "enum P2PEnergyTrading.Role",
				"name": "role",
				"type": "uint8"
			},
			{
				"internalType": "uint256",
				"name": "energyAmount",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "pricePerKWh",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "previousHash",
		"outputs": [
			{
				"internalType": "bytes32",
				"name": "",
				"type": "bytes32"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "previousHashExecution",
		"outputs": [
			{
				"internalType": "bytes32",
				"name": "",
				"type": "bytes32"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "resultSubmissionCount",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "enum P2PEnergyTrading.Role",
				"name": "_role",
				"type": "uint8"
			},
			{
				"internalType": "uint256",
				"name": "_energyAmount",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "_pricePerKWh",
				"type": "uint256"
			}
		],
		"name": "submitData",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "bytes32",
				"name": "resultHash",
				"type": "bytes32"
			}
		],
		"name": "submitExecutionResult",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "submittedResults",
		"outputs": [
			{
				"internalType": "address",
				"name": "submitter",
				"type": "address"
			},
			{
				"internalType": "bytes32",
				"name": "resultHash",
				"type": "bytes32"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "verifyExecutionResult",
		"outputs": [
			{
				"internalType": "bytes32",
				"name": "majorityHash",
				"type": "bytes32"
			},
			{
				"internalType": "bool",
				"name": "isVerified",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]] # Insert ABI here and don't remove the first [].
account_addr, private_key, nonce, tx_receipt = get_contract_addr(BYTECODE, ABI, node_url=NODE_URL, chain_id=CHAIN_ID)
contract_address = tx_receipt.contractAddress
print(f"Contract deployed at: {contract_address}")

contract = web3.eth.contract(address=contract_address, abi=ABI)

# =================== Routes ===================
@app.route("/")
def home():
    return render_template("index.html")

@app.route("/submit_trade", methods=["POST"])
def submit_trade():
    data = request.json
    role = data["role"]
    sender = web3.to_checksum_address(data["sender"])
    
    # Default values for N/A role
    energy = int(data["energy"]) if role != "N/A" else 0
    price = int(data["price"]) if role != "N/A" else 0

    nonce = web3.eth.get_transaction_count(sender)

    if role == "buyer":
        transaction = contract.functions.submitBid(energy, price).build_transaction({
            "from": sender,
            "gasPrice": web3.eth.gas_price,
            "nonce": nonce,
        })
    elif role == "seller":
        transaction = contract.functions.submitOffer(energy, price).build_transaction({
            "from": sender,
            "gasPrice": web3.eth.gas_price,
            "nonce": nonce,
        })
    elif role == "N/A":
        return jsonify({"message": "No trade submitted for N/A role"}), 200
    else:
        return jsonify({"error": "Invalid role"}), 400

    signed_txn = web3.eth.account.sign_transaction(transaction, private_key)
    tx_hash = web3.eth.send_raw_transaction(signed_txn.rawTransaction)
    print(f"Trade submitted: {web3.to_hex(tx_hash)}")

    return jsonify({"message": "Trade submitted", "tx_hash": web3.to_hex(tx_hash)})

@app.route("/execute_trades", methods=["POST"])
def execute_trades():
    sender = account_addr
    nonce = web3.eth.get_transaction_count(sender)

    transaction = contract.functions.matchTrades().build_transaction({
        "from": sender,
        "gasPrice": web3.eth.gas_price,
        "nonce": nonce,
    })

    signed_txn = web3.eth.account.sign_transaction(transaction, private_key)
    tx_hash = web3.eth.send_raw_transaction(signed_txn.rawTransaction)
    print(f"Trades executed: {web3.to_hex(tx_hash)}")

    return jsonify({"message": "Trades executed", "tx_hash": web3.to_hex(tx_hash)})

@app.route("/run_rounds", methods=["POST"])
def run_rounds():
    rounds = int(request.json.get("rounds", 1))
    sender = account_addr

    for i in range(rounds):
        nonce = web3.eth.get_transaction_count(sender)
        transaction = contract.functions.matchTrades().build_transaction({
            "from": sender,
            "gasPrice": web3.eth.gas_price,
            "nonce": nonce,
        })
        signed_txn = web3.eth.account.sign_transaction(transaction, private_key)
        tx_hash = web3.eth.send_raw_transaction(signed_txn.rawTransaction)
        print(f"Round {i+1} executed: {web3.to_hex(tx_hash)}")

    return jsonify({"message": f"{rounds} rounds executed successfully"})

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0")
