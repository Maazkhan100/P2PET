from eth_utils import address
from web3 import Web3
import os
from decrypt import decrypt_aes128
import json
import subprocess
from datetime import datetime
import sys
from get_contract_addr import get_contract_addr

sys.path.append('../')
from w3080 import w3080

bytecode = ""

abi = [
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "meter_address",
				"type": "address"
			}
		],
		"name": "get_meter_reading",
		"outputs": [
			{
				"components": [
					{
						"internalType": "string",
						"name": "timestamp",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "from",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "to",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "active_power",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "import_energy",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "export_energy",
						"type": "string"
					}
				],
				"internalType": "struct meter_data_storage.meter_reading[]",
				"name": "",
				"type": "tuple[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "readings",
		"outputs": [
			{
				"internalType": "string",
				"name": "timestamp",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "from",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "to",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "active_power",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "import_energy",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "export_energy",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "meter_address",
				"type": "address"
			},
			{
				"internalType": "string",
				"name": "timestamp",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "from",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "to",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "active_power",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "import_energy",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "export_energy",
				"type": "string"
			}
		],
		"name": "store_meter_reading",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]

if (len(sys.argv) > 1): # to exclude the file name
    is_raspberrypi = int(sys.argv[1])
else:
    is_raspberrypi = 1  # run on Raspberry Pi nodes by default

if (is_raspberrypi):
    node_url = "http://192.168.0.152:22000"
else:
    node_url = "http://127.0.0.1:22000"

chain_id = 10

account_addr, private_key, nonce, tx_receipt = get_contract_addr(bytecode, abi, node_url=node_url, chain_id=chain_id)

print("Tx Receipt is: ", tx_receipt)

# print(tx_receipt.contractAddress)

# # ===================== Interact with the deployed contract =====================

w3 = Web3(Web3.HTTPProvider(node_url))
deployed_contract = w3.eth.contract(address=tx_receipt.contractAddress, abi=abi)
addr = w3.to_checksum_address(account_addr)
print(f"\nInitial value stored is: {deployed_contract.functions.get_meter_reading(addr).call()}")

def setting_transaction(nonce, chain_id, gas_price, private_key, data_dict, node_url="http://192.168.0.152:22000"):
    """
    This function is used to call the solidity functions which perform some calculations
    (unlike the functions which only have return statement in them)
    like setter function, adding function etc

    nonce: nonce of previous transaction, this function will update it automatically
    chain_id: chain id on which node is running
    gas_price: gas price
    private_key: private_key returned by decrypt_aes128 function

    returns nonce and transaction receipt if successful transaction happened.
    """

    timestamp     = data_dict["timestamp"]
    _from         = data_dict["from"]
    _to           = data_dict["to"]
    active_power  = data_dict["active_power"]
    import_energy = data_dict["import_energy"]
    export_energy = data_dict["export_energy"]

    # nonce is increamented by 1 for every attemp made (https://www.investopedia.com/terms/n/nonce.asp#:~:text=A%20nonce%20is%20a%20numerical%20value%20used%20in,values%20in%20the%20block%20consumes%20significant%20computational%20power.)
    nonce = nonce + 1


    new_transaction = deployed_contract.functions.store_meter_reading(addr, timestamp, _from, _to, active_power, import_energy, export_energy).build_transaction(
        {
            "chainId": chain_id,
            "gasPrice": gas_price,
            "from": addr,
            "nonce": nonce,
        }
    )

    try:
        signed_new_txn = w3.eth.account.sign_transaction(
            new_transaction, private_key=private_key
        )
        tx_new_hash = w3.eth.send_raw_transaction(signed_new_txn.rawTransaction)
        print("\nSending new transaction...\n")
        tx_new_receipt = w3.eth.wait_for_transaction_receipt(tx_new_hash)

        return nonce, tx_new_receipt
    except Exception as e:
        print(f"{e}")
        exit(1)

energy_meter_url = "http://192.168.0.107/monitorjson"

import time

energy_allocations = [
    {
        "prosumer_name": 'prosumer 2',
        "prosumer_id": 3,
        "prosumer_acc_addr": '0x22',
        "prosumer_offer": 2,
        "prosumer_capacity": 5,
        "consumer_name": 'consumer 90',
        "consumer_id": 3,
        "consumer_acc_addr": '0x22',
        "consumer_bid": 11,
        "consumer_demand": 1,
        "price": 6.5,
        "allocated_energy": 1
    },
    {
        "prosumer_name": 'prosumer 2',
        "prosumer_id": 3,
        "prosumer_acc_addr": '0x22',
        "prosumer_offer": 2,
        "prosumer_capacity": 4,
        "consumer_name": 'consumer 32',
        "consumer_id": 4,
        "consumer_acc_addr": '0x43',
        "consumer_bid": 8,
        "consumer_demand": 5,
        "price": 5,
        "allocated_energy": 4
    },
    {
        "prosumer_name": 'prosumer 1',
        "prosumer_id": 1,
        "prosumer_acc_addr": '0x123',
        "prosumer_offer": 5,
        "prosumer_capacity": 4,
        "consumer_name": 'consumer 32',
        "consumer_id": 4,
        "consumer_acc_addr": '0x43',
        "consumer_bid": 8,
        "consumer_demand": 1,
        "price": 6.5,
        "allocated_energy": 1
    }
]

prosumers_consumers = [(entry["prosumer_name"], entry["consumer_name"]) for entry in energy_allocations]

amIprosumer = True
my_name = "prosumer 2"

def generate_transaction_data(energy_allocations, amIprosumer, my_name, account_addr, w3080_data):
    transactions = []

    for transaction in energy_allocations:
        # Initialize dictionaries
        _from_dict = {}
        _to_dict = {}

        if amIprosumer:
            # If the user is a prosumer, check if their name matches the prosumer in the transaction
            if my_name == transaction["prosumer_name"]:
                _from_dict = {
                    "name": transaction["prosumer_name"],
                    "acc_addr": transaction["prosumer_acc_addr"]
                }
                _to_dict = {
                    "name": transaction["consumer_name"],
                    "acc_addr": transaction["consumer_acc_addr"]
                }
        else:
            # If the user is a consumer, check if their name matches the consumer in the transaction
            if my_name == transaction["consumer_name"]:
                _from_dict = {
                    "name": transaction["prosumer_name"],
                    "acc_addr": transaction["prosumer_acc_addr"]
                }
                _to_dict = {
                    "name": transaction["consumer_name"],
                    "acc_addr": transaction["consumer_acc_addr"]
                }

        if _from_dict and _to_dict:
            # Only generate data_dict if both dictionaries are populated
            data_dict = {
                "timestamp": str(datetime.now()),
                "from": str(_from_dict),
                "to": str(_to_dict),
                "active_power": str(w3080_data[2]),  # W
                "import_energy": str(w3080_data[3]),  # kWh
                "export_energy": str(w3080_data[4])   # kWh
            }

            transactions.append(data_dict)

    return transactions

while True:
    w3080_data   = w3080(energy_meter_url)['Data']

    data_dict = generate_transaction_data(energy_allocations, amIprosumer, my_name, account_addr, w3080_data)

    print(data_dict)
    exit(1)
    for data in data_dict:
        w3 = Web3(Web3.HTTPProvider(node_url))
        nonce, tx_receipt = setting_transaction(nonce, chain_id, w3.eth.gas_price, private_key, data)
        print(f"\nWe have updated the value. New value is: {deployed_contract.functions.get_meter_reading(addr).call()}")
        time.sleep(1)
